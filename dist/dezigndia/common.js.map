{"version":3,"sources":["webpack:///./src/app/_services/auth-cookie-handler.service.ts","webpack:///./src/app/_services/http-method.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyC;AACQ;AAKjD;IACI,kCAAoB,cAA6B;QAA7B,mBAAc,GAAd,cAAc,CAAe;IAAG,CAAC;IAE9C,6CAAU,GAAjB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IACM,6CAAU,GAAjB,UAAkB,SAAS,EAAE,UAAU;QACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;IACjF,CAAC;IACM,gDAAa,GAApB;QACI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;IACpC,CAAC;IACM,+CAAY,GAAnB;QACI,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAdQ,wBAAwB;QAHpC,gEAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;+EAEsC,gEAAa;OADxC,wBAAwB,CAepC;IAAD,+BAAC;CAAA;AAfoC;;;;;;;;;;;;;;;;;;;;;;ACNI;AACmD;AACtC;AACV;AAEe;AAK3D;IAGI,4BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAF5B,WAAM,GAAG,qEAAW,CAAC,MAAM,CAAC;IAIpC,CAAC;IACO,wCAAW,GAAnB;QACI,IAAI,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC;QAChC,OAAO,GAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;QAC1E,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,wCAAwC,CAAC,CAAC;QACjF,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,mCAAmC,CAAC,CAAC;QACpE,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAC/C,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACzC,OAAO,OAAO,CAAC;IACnB,CAAC;IAEO,yCAAY,GAApB,UAAqB,KAAwB;QACzC,IAAI,QAAa,CAAC;QAClB,IAAG,KAAK,YAAY,UAAU,EAAE;YAC5B,QAAQ,GAAG,YAAU,KAAK,CAAC,OAAO,oBAAiB,CAAC;SACvD;aAAM;YACH,QAAQ,GAAG,EAAC,SAAS,EAAE,KAAG,KAAK,CAAC,MAAQ,EAAE,OAAO,EAAE,KAAG,KAAK,CAAC,OAAS,EAAE,EAAE,EAAE,KAAG,KAAK,CAAC,EAAI,EAAC,CAAC;SAC7F;QACD,OAAO,uDAAU,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAEM,sCAAS,GAAhB,UAAiB,GAAW,EAAE,IAAQ;QAAtC,iBAOC;QALG,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAG,IAAI,CAAC,MAAM,GAAG,GAAK,EAAE,IAAI,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC,IAAI,CACnF,4DAAK,CAAC,CAAC,CAAC,EACR,0DAAG,CAAC,UAAC,GAAa,IAAM,OAAO,GAAG,GAAC,CAAC,EACpC,iEAAU,CAAC,UAAC,GAAG,IAAK,YAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAC9C;IACL,CAAC;IAEM,qCAAQ,GAAf,UAAgB,GAAW,EAAE,MAAa;QAA1C,iBAMC;QALG,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC,IAAI,CACzE,4DAAK,CAAC,CAAC,CAAC,EACR,0DAAG,CAAC,UAAC,GAAa,IAAM,OAAO,GAAG,GAAC,CAAC,EACpC,iEAAU,CAAC,aAAG,IAAI,YAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAC5C;IACL,CAAC;IAEM,qCAAQ,GAAf,UAAgB,GAAW,EAAE,IAAQ,EAAE,MAAa;QAApD,iBAMC;QALG,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC,IAAI,CAC/E,4DAAK,CAAC,CAAC,CAAC,EACR,0DAAG,CAAC,UAAC,GAAa,IAAM,OAAO,GAAG,GAAC,CAAC,EACpC,iEAAU,CAAC,UAAC,GAAG,IAAK,YAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAC9C;IACL,CAAC;IAEM,wCAAW,GAAlB,UAAmB,GAAW,EAAE,MAAY;QAA5C,iBAMC;QALG,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC,IAAI,CAC3E,4DAAK,CAAC,CAAC,CAAC,EACR,0DAAG,CAAC,UAAC,GAAa,IAAM,OAAO,GAAG,GAAC,CAAC,EACpC,iEAAU,CAAC,UAAC,GAAG,IAAK,YAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAtB,CAAsB,CAAC,CAC/C;IACL,CAAC;IA1DQ,kBAAkB;QAH9B,gEAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;+EAI4B,+DAAU;OAH3B,kBAAkB,CA2D9B;IAAD,yBAAC;CAAA;AA3D8B","file":"common.js","sourcesContent":["import {Injectable} from '@angular/core';\nimport {CookieService} from 'ngx-cookie-service';\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class AuthCookieHandlerService {\n    constructor(private _cookieService: CookieService) {}\n\n    public _getCookie(): string {\n        return this._cookieService.get('token');\n    }\n    public _setCookie(tokenName, tokenValue): void {\n        this._cookieService.set(tokenName, tokenValue, 100, '', '', false, \"Strict\");\n    }\n    public _deleteCookie(): void {\n        this._cookieService.deleteAll();\n    }\n    public _checkCookie(): boolean {\n        return this._cookieService.check('token');\n    }\n}","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {map, catchError, retry} from 'rxjs/operators';\nimport {throwError, Observable} from 'rxjs';\n\nimport {environment} from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class HttpMethodsService {\n    private apiUrl = environment.apiUrl;\n\n    constructor(private http: HttpClient) {\n\n    }\n    private _setHeaders() {\n        let headers = new HttpHeaders();\n        headers  = headers.set('Content-Type', 'application/json; charset=utf-8');\n        headers = headers.set('Authorization', 'Bearer jhsdjsakjdhasdhshdue837893b32g3');\n        headers = headers.set('Cache-Control', 'no');\n        headers = headers.set('token', 'asdsaugbugbefuierneoibcquydgkciwe');\n        headers = headers.set('sign', 'dsdsadsdsadsd');\n        headers = headers.set('Expires', '3600');\n        return headers;\n    }\n\n    private _handleError(error: HttpErrorResponse) {\n        let errorMsg: any;\n        if(error instanceof ErrorEvent) {\n            errorMsg = `Error: ${error.message}, Status: false`;\n        } else {\n            errorMsg = {ErrorCode: `${error.status}`, Message: `${error.message}`, ok: `${error.ok}`};\n        }\n        return throwError(errorMsg);\n    }\n\n    public _postCall(url: string, body: {}): Observable<any> {\n        \n        return this.http.post(`${this.apiUrl}${url}`, body, {headers: this._setHeaders()}).pipe(\n            retry(2),\n            map((res: Response) => {return res}),\n            catchError((err) => this._handleError(err))\n        )\n    }\n\n    public _getCall(url: string, params ?: any): Observable<any> {\n        return this.http.get(url, {params: params, headers: this._setHeaders()}).pipe(\n            retry(2),\n            map((res: Response) => {return res}),\n            catchError(err => this._handleError(err))\n        )\n    }\n\n    public _putCall(url: string, body: {}, params ?: any): Observable<any> {\n        return this.http.put(url, body, {params: params, headers: this._setHeaders()}).pipe(\n            retry(2),\n            map((res: Response) => {return res}),\n            catchError((err) => this._handleError(err))\n        )\n    }\n\n    public _deleteCall(url: string, params?: any): Observable<any> {\n        return this.http.delete(url, {params: params, headers: this._setHeaders()}).pipe(\n             retry(1),\n             map((res: Response) => {return res}),\n             catchError((err) => this._handleError(err))\n        )\n    }\n}"],"sourceRoot":""}